#! /usr/bin/python3 -u
# -*- coding: utf-8; -*-
"""
(C) Copyright 2016 Taylor Raack.

Facsimile Toolbar is free software: you can redistribute it and/or modify
it under the terms of the Affero GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Facsimile Toolbar is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
Affero GNU General Public License for more details.

You should have received a copy of the Affero GNU General Public License
along with Facsimile Toolbar.  If not, see <http://www.gnu.org/licenses/>.
"""

from gi.repository import AppIndicator3
from gi.repository import Gtk, GLib, GObject
import collections
import fcntl
import simplejson as json
import os
import stat
import subprocess
import sys
import threading
import time

LocalConfiguration = collections.namedtuple('LocalConfiguration', [])
RemoteConfiguration = collections.namedtuple('RemoteConfiguration', ['host','user','private_key_saved','path'])
Configuration = collections.namedtuple('Configuration', ['automaticBackups', 'remoteConfiguration', 'localConfiguration', 'configurationType'])

class ConfigurationDialog():
    def __init__(self, save_configuration_callback):
        self.reset_on_show = True
        self.save_configuration_callback = save_configuration_callback
        self.gladefile = "/usr/share/facsimile-toolbar/facsimile-configuration.glade"
        self.builder = Gtk.Builder()
        self.builder.add_from_file(self.gladefile)

        self.builder.connect_signals(self)
    
        self.window = self.builder.get_object("configuration")
        self.local_box = self.builder.get_object("local_box")
        self.remote_box = self.builder.get_object("remote_box")
        
        self.automatic_backups = self.builder.get_object("automatic_backups")
        self.remote_host = self.builder.get_object("remote_host")
        self.user = self.builder.get_object("user")
        self.private_key = self.builder.get_object("private_key")
        self.path = self.builder.get_object("path")
        
        self.private_key_contents = None

    def show(self, configuration):
        self.automatic_backups.set_active(configuration.get("automaticBackups", False))

        remote_configuration = configuration.get("remoteConfiguration", {})
        self.remote_host.set_text(remote_configuration.get("host", ""))
        self.user.set_text(remote_configuration.get("user", ""))
        self.private_key.set_text("<saved>" if remote_configuration.get("private_key_saved", False) else "")
        self.path.set_text(remote_configuration.get("path", ""))

        local_configuration = configuration.get("localConfiguration", {})

        self.window.present()
    
    def on_private_key_chooser_file_set(self, file_set):
        me = "hi"
        # read private key contents into memory
        #self.private_key_contents = 
        
    def on_apply_clicked(self, item):
        if not self.save_configuration_callback(Configuration(
                               localConfiguration = LocalConfiguration(),
                               remoteConfiguration = RemoteConfiguration(
                                  host = self.remote_host.get_text(),
                                  user = self.user.get_text(),
                                  private_key_saved = True,
                                  path = self.path.get_text()),
                              automaticBackups = self.automatic_backups.get_active(),
                              configurationType = "local" if False else "remote")):
            self.close_and_reset()
        else:
            # TODO - handle this in a better way in the UI
            print(error)
        
    def on_cancel_clicked(self, item):
        self.close_and_reset()
        
    def close_and_reset(self):
        self.reset_on_show = True
        self.window.hide()
    
    def on_configuration_delete_event(self, item, item2):
        self.close_and_reset()
        # don't actually delete the window, just hide
        return True
    
    def on_backup_type_changed(self, combo):
        if combo.get_model()[combo.get_active_iter()][0] == 'Local':
            self.remote_box.set_visible(False)
            self.local_box.set_visible(True)
        else:
            self.local_box.set_visible(False)
            self.remote_box.set_visible(True)

class SnapshotListBoxRow(Gtk.ListBoxRow):
    def __init__(self, timestamp, display_text):
        super(Gtk.ListBoxRow, self).__init__()
        self.timestamp = timestamp
        self.display_text = display_text
        self.add(Gtk.Label(display_text))

class SnapshotViewer():

    def __init__(self):
        self.gladefile = "/usr/share/facsimile-toolbar/facsimile-backup-viewer.glade"  
        self.builder = Gtk.Builder()
        self.builder.add_from_file(self.gladefile)

        self.builder.connect_signals(self)
    
        self.window = self.builder.get_object("backup-viewer")
        self.snapshot_list_box = self.builder.get_object("snapshot-list-box")
        self.file_chooser_widget = self.builder.get_object("file-chooser-widget")

    def show(self):
        th = threading.Thread(target=self.populate_snapshot_list, args=())
        th.daemon = True
        th.start()
        GLib.idle_add(self.change_to_backup_directory, None)
        self.window.present()
       
    def change_to_backup_directory(self, timestamp = None):
        if not timestamp:
            self.file_chooser_widget.set_filename('/facsimile-sshfs/backup/backup/dummy')
        else:
            dir = '/facsimile-sshfs/backup/.zfs/snapshot/facsimile-' + timestamp + '/backup/dummy'
            self.file_chooser_widget.set_filename(dir)
        
    def populate_snapshot_list(self):
        GLib.idle_add(self.display_snapshots, sorted(json.loads(subprocess.check_output(["facsimile", "list-snapshots"], universal_newlines = True)).items()))
    
    def display_snapshots(self, snapshots):
        for timestamp, display_text in snapshots:
            self.snapshot_list_box.add(SnapshotListBoxRow(timestamp, display_text))

        self.snapshot_list_box.show_all()
    
    def on_snapshot_list_box_row_activated(self, widget, row):
        self.change_to_backup_directory(row.timestamp)

class App():
    def __init__(self):
        self.configuration_dialog = ConfigurationDialog(self.save_configuration)
        self.indicator = AppIndicator3.Indicator.new("facsimile-toolbar",os.path.abspath('/usr/share/facsimile-toolbar/images/backup1.svg'), AppIndicator3.IndicatorCategory.SYSTEM_SERVICES)
        self.indicator.set_status(AppIndicator3.IndicatorStatus.ACTIVE)
        
        menu = Gtk.Menu()
        
        self.menu_item = Gtk.MenuItem("Loading...")
        menu.append(self.menu_item)
        self.show_snapshots = Gtk.MenuItem("View Backed up files...")
        menu.append(self.show_snapshots)
        self.show_snapshots.show()
        self.show_snapshots.connect('activate', self.open_show_snapshots_window)
        self.config_item = Gtk.MenuItem("Edit Configuration...")
        menu.append(self.config_item)
        self.menu_item.show()
        self.config_item.show()
        self.config_item.connect('activate', self.open_configuration_window)
        
        self.indicator.set_menu(menu)

        th = threading.Thread(target=self.update_status_menu_item, args=())
        th.daemon = True
        th.start()
        
        th2 = threading.Thread(target=self.verify_icon_rotation, args=())
        th2.daemon = True
        th2.start()

        GLib.MainLoop().run()
        
    def save_configuration(self, configuration):
        with subprocess.Popen(["sudo", "-u", "facsimile", "facsimile", "set-configuration"], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True) as proc:
            (stdout_data, stderr_data) = proc.communicate(json.dumps(configuration))
            return None if proc.returncode == 0 else "%s %s" % (stdout_data, stderr_data)
    
    def open_configuration_window(self, item):
        if self.backupRunning:
            return
        th = threading.Thread(target=self.get_config_then_open_window, args=())
        th.daemon = True
        th.start()
        
    def get_config_then_open_window(self):
        GLib.idle_add(self.configuration_dialog.show, json.loads(subprocess.check_output(["facsimile", "get-configuration"], universal_newlines = True)))

    def open_show_snapshots_window(self, item):
        SnapshotViewer().show()
        
    def lastBackupTime(self):
        try:
            snapshots = json.loads(os.popen("facsimile list-snapshots").read())
            return snapshots[max(snapshots)]
        except:
            return "unknown"
    
    def update_status_menu_item(self):
        self.backupRunning = False
        while True:
            try:
                os.chmod('/var/lock/facsimile', stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IWGRP | stat.S_IROTH | stat.S_IWOTH)
            except:
                pass
            with open('/var/lock/facsimile', 'w') as lockfile:
                try:
                    # if facsimile lock file can be locked, a backup is not running
                    fcntl.lockf(lockfile.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)
                    fcntl.lockf(lockfile.fileno(), fcntl.LOCK_UN)
                    self.backupRunning = False
                    GLib.idle_add(self.config_item.set_label, "Edit Configuration...")
                except:
                    self.backupRunning = True
                    GLib.idle_add(self.config_item.set_label, "Edit Configuration disabled during backup")
                GLib.idle_add(self.config_item.set_sensitive, not self.backupRunning)
            if self.backupRunning == True:
                try:
                    with open('/var/cache/facsimile/status') as statusfile:
                        message = "Estimated remaining backup time: %s minutes" % json.loads(statusfile.read()).get(u'time_remaining')
                        GLib.idle_add(self.menu_item.set_label, message)
                except:
                    GLib.idle_add(self.menu_item.set_label, "Estimated remaining backup time: unknown")
            else:
                GLib.idle_add(self.menu_item.set_label, "Last backup completed at " + self.lastBackupTime())
                    
            time.sleep(5)
    
    def verify_icon_rotation(self):
        icon = 1
        while True:
            if self.backupRunning == True:
                icon = icon % 16 + 1
                GLib.idle_add(self.indicator.set_icon, "/usr/share/facsimile-toolbar/images/backup%s.svg" % icon)
            elif icon != 1:
                GLib.idle_add(self.indicator.set_icon, '/usr/share/facsimile-toolbar/images/backup1.svg')
                icon = 1
                    
            time.sleep(0.1)

if __name__ == "__main__":
    App()
