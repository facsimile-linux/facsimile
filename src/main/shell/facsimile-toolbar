#! /usr/bin/python -u
# -*- coding: utf-8; -*-
"""
(C) Copyright 2016 Taylor Raack.

Facsimile is free software: you can redistribute it and/or modify
it under the terms of the Affero GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Facsimile is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
Affero GNU General Public License for more details.

You should have received a copy of the Affero GNU General Public License
along with Facsimile.  If not, see <http://www.gnu.org/licenses/>.
"""

import appindicator
import gobject
import gtk
import fcntl
import json
import os
import sys
import threading
import time

gtk.gdk.threads_init()
        
class App():
    def __init__(self):
        self.indicator = appindicator.Indicator("facsimile-toolbar",os.path.abspath('/usr/share/facsimile/images/backup1.svg'), appindicator.CATEGORY_SYSTEM_SERVICES)
        self.indicator.set_status(appindicator.STATUS_ACTIVE)
        
        menu = gtk.Menu()
        
        self.menu_item = gtk.MenuItem("Loading...")
        menu.append(self.menu_item)
        self.menu_item.show()
        
        self.indicator.set_menu(menu)

        th = threading.Thread(target=self.update_status_menu_item, args=())
        th.daemon = True
        th.start()
        
        th2 = threading.Thread(target=self.verify_icon_rotation, args=())
        th2.daemon = True
        th2.start()
        
        gtk.gdk.threads_enter()
        gtk.main()
        gtk.gdk.threads_leave()
        
        self.rotateThread = None
        
    def lastBackupTime(self):
        try:
            return json.loads(os.popen("facsimile list-snapshots").read())[-1]
        except:
            return "unknown"
    
    def update_status_menu_item(self):
        self.backupRunning = False
        while True:
            with open('/var/lock/facsimile', 'w') as lockfile:
                try:
                    # if facsimile lock file can be locked, a backup is not running
                    fcntl.lockf(lockfile.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)
                    fcntl.lockf(lockfile.fileno(), fcntl.LOCK_UN)
                    self.backupRunning = False
                except:
                    self.backupRunning = True
            if self.backupRunning == True:
                try:
                    with open('/var/cache/facsimile/status') as statusfile:
                        message = "Estimated remaining backup time: %s minutes" % json.loads(statusfile.read()).get(u'time_remaining')
                        gobject.idle_add(self.menu_item.set_label, message)
                except:
                    gobject.idle_add(self.menu_item.set_label, "Estimated remaining backup time: unknown")
            else:
                gobject.idle_add(self.menu_item.set_label, "Last backup completed at " + self.lastBackupTime())
                    
            time.sleep(5)
    
    def verify_icon_rotation(self):
        icon = 1
        while True:
            if self.backupRunning == True:
                icon = icon % 16 + 1
                gobject.idle_add(self.indicator.set_icon, "/usr/share/facsimile/images/backup%s.svg" % icon)
            elif icon != 1:
                gobject.idle_add(self.indicator.set_icon, '/usr/share/facsimile/images/backup1.svg')
                icon = 1
                    
            time.sleep(0.1)

if __name__ == "__main__":
    App()
